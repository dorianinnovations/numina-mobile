name: Deploy Numina Web

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint --if-present
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Build application
      run: npm run build:production
      env:
        EXPO_PUBLIC_API_URL: ${{ secrets.API_URL }}
        EXPO_PUBLIC_ENV: production
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files-${{ matrix.node-version }}
        path: dist/
        retention-days: 7

  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build:production
      
    - name: Run Lighthouse audit
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: '.lighthouserc.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for staging
      run: npm run build:production
      env:
        EXPO_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
        EXPO_PUBLIC_ENV: staging
        
    - name: Deploy to Staging
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=dist --site=${{ secrets.NETLIFY_STAGING_SITE_ID }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, lighthouse-audit]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build:production
      env:
        EXPO_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        EXPO_PUBLIC_ENV: production
        
    - name: Deploy to Production
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=dist --site=${{ secrets.NETLIFY_SITE_ID }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Numina Web v${{ github.run_number }}
        body: |
          üöÄ Automated deployment of Numina Web
          
          **Changes in this release:**
          ${{ github.event.head_commit.message }}
          
          **Deployment Details:**
          - Build Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          
          **Performance:**
          - Lighthouse audit passed ‚úÖ
          - All tests passed ‚úÖ
          
        draft: false
        prerelease: false

  performance-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Performance monitoring
      run: |
        echo "üîç Running post-deployment performance checks..."
        curl -f "https://web.numina.ai/health" || exit 1
        echo "‚úÖ Health check passed"
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          üéâ Numina Web successfully deployed!
          
          üåê Live at: https://web.numina.ai
          üìä Performance: All checks passed
          üöÄ Build: ${{ github.run_number }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}