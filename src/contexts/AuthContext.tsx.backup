import React, { createContext, useContext, useState, useEffect, ReactNode, useRef } from 'react';
import ApiService, { UserData, LoginCredentials, SignUpCredentials } from '../services/api';
import SecureStorageService from '../services/secureStorage';

/**
 * Simplified Authentication Context for React Native
 * Focuses on core authentication without complex sync logic
 */

interface AuthContextType {
  // Authentication state
  isAuthenticated: boolean;
  loading: boolean;
  userData: UserData | null;
  isInitializing: boolean;

  // Authentication methods
  login: (credentials: LoginCredentials) => Promise<{ success: boolean; error?: string }>;
  signUp: (credentials: SignUpCredentials) => Promise<{ success: boolean; error?: string }>;
  logout: () => Promise<void>;
  
  // Session management
  checkAuthStatus: () => Promise<void>;
  refreshUserData: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  // Simplified state management
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(false);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isInitializing, setIsInitializing] = useState(true);

  // State lock to prevent race conditions
  const authStateLock = useRef<boolean>(false);

  // Initialize authentication state on app startup
  useEffect(() => {
    initializeAuth();
  }, []);

  const initializeAuth = async (): Promise<void> => {
    setIsInitializing(true);

    try {
      // Check if a valid session exists
      const hasSession = await SecureStorageService.hasValidSession();
      console.log('[AuthContext] Checking session on init, hasSession:', hasSession);
      
      if (hasSession) {
        console.log('[AuthContext] Valid session found, validating token...');
        
        // Validate token with server
        const validation = await ApiService.validateToken();
        
        if (validation.success && validation.data) {
          console.log('[AuthContext] Token validation successful');
          setIsAuthenticated(true);
          setUserData(validation.data);
          
          // Update stored user data
          await SecureStorageService.setUserData(validation.data);
        } else {
          console.log('[AuthContext] Token validation failed, clearing auth data');
          await clearAuthData();
        }
      } else {
        console.log('[AuthContext] No valid session found');
      }
    } catch (error) {
      console.error('Auth initialization error:', error);
      await clearAuthData();
    } finally {
      setIsInitializing(false);
    }
  };

  const clearAuthData = async (): Promise<void> => {
    try {
      console.log('[AuthContext] Clearing authentication data...');
      await SecureStorageService.clearSessionData();
      setIsAuthenticated(false);
      setUserData(null);
      console.log('[AuthContext] Authentication data cleared successfully');
    } catch (error) {
      console.error('[AuthContext] Error clearing auth data:', error);
      // Force state reset even if storage clear fails
      setIsAuthenticated(false);
      setUserData(null);
    }
  };

  // CRITICAL FIX: Enhanced login with proper error handling and rollback
  const login = async (credentials: LoginCredentials): Promise<{ success: boolean; error?: string }> => {
    // Prevent concurrent login attempts
    if (authStateLock.current) {
      console.warn('[AuthContext] Login already in progress, ignoring duplicate request');
      return { success: false, error: 'Login already in progress' };
    }

    authStateLock.current = true;
    setLoading(true);
    
    // Store original state for rollback
    const originalAuthState = {
      isAuthenticated,
      userData
    };
    
    try {
      console.log('[AuthContext] Starting login process...');
      const response = await ApiService.login(credentials);
      
      if (response.success && response.data) {
        // Validate response structure
        const token = response.data.token;
        const user = response.data.data?.user;
        
        if (!token) {
          throw new Error('No authentication token received from server');
        }
        
        if (!user || !user.email) {
          throw new Error('Invalid user data received from server');
        }
        
        // Normalize user data - handle server response format
        const serverUser = user as any; // Server response may have _id instead of id
        const normalizedUser: UserData = {
          id: serverUser._id || serverUser.id,
          email: serverUser.email,
          profile: serverUser.profile,
          createdAt: serverUser.createdAt || new Date().toISOString(),
          isPremium: serverUser.isPremium,
          settings: serverUser.settings,
        };
        
        // Ensure we have the correct id format
        if (!normalizedUser.id) {
          throw new Error('Invalid user ID received from server');
        }
        
        console.log('[AuthContext] Storing authentication data...');
        
        // CRITICAL FIX: Sequential storage operations with rollback
        try {
          // Store token first
          await SecureStorageService.setToken(token);
          console.log('[AuthContext] Token stored successfully');
          
          // Store user data
          await SecureStorageService.setUserData(normalizedUser);
          console.log('[AuthContext] User data stored successfully');
          
          // Clear other users' data
          if (normalizedUser.id) {
            await SecureStorageService.clearOtherUsersData(normalizedUser.id);
            console.log('[AuthContext] Other users data cleared, current user data preserved');
          }
          
          // Update state only after all storage operations succeed
          setIsAuthenticated(true);
          setUserData(normalizedUser);
          
          // Load user's previous data (emotions, conversations, etc.)
          if (normalizedUser.id) {
            try {
              const userData = await SecureStorageService.loadUserSpecificData(normalizedUser.id);
              console.log('[AuthContext] User data loaded:', {
                emotions: userData.emotions.length,
                conversations: userData.conversations.length
              });
            } catch (error) {
              console.error('[AuthContext] Error loading user data:', error);
              // Don't fail login for this error
            }
          }
          
          console.log('[AuthContext] Login successful');
          return { success: true };
          
        } catch (storageError) {
          // CRITICAL FIX: Rollback on storage failure
          console.error('[AuthContext] Storage operation failed, rolling back:', storageError);
          
          // Rollback state
          setIsAuthenticated(originalAuthState.isAuthenticated);
          setUserData(originalAuthState.userData);
          
          // Clear any partially stored data
          try {
            await SecureStorageService.clearSessionData();
          } catch (clearError) {
            console.error('[AuthContext] Failed to clear data during rollback:', clearError);
          }
          
          throw new Error('Failed to store authentication data. Please try again.');
        }
        
      } else {
        console.error('Login failed:', response.error);
        return { 
          success: false, 
          error: response.error || 'Login failed' 
        };
      }
    } catch (error: unknown) {
      console.error('Login error:', error);
      
      // CRITICAL FIX: Ensure state is consistent on error
      setIsAuthenticated(originalAuthState.isAuthenticated);
      setUserData(originalAuthState.userData);
      
      const errorMessage = error instanceof Error ? error.message : 'Network error occurred';
      return { 
        success: false, 
        error: errorMessage
      };
    } finally {
      setLoading(false);
      authStateLock.current = false;
    }
  };

  // CRITICAL FIX: Enhanced signup with proper error handling
  const signUp = async (credentials: SignUpCredentials): Promise<{ success: boolean; error?: string }> => {
    // Prevent concurrent signup attempts
    if (authStateLock.current) {
      console.warn('[AuthContext] Signup already in progress, ignoring duplicate request');
      return { success: false, error: 'Signup already in progress' };
    }

    authStateLock.current = true;
    setLoading(true);
    
    // Store original state for rollback
    const originalAuthState = {
      isAuthenticated,
      userData
    };
    
    try {
      console.log('[AuthContext] Starting signup process...');
      const response = await ApiService.signUp(credentials);
      
      if (response.success && response.data) {
        // Validate response structure
        const token = response.data.token;
        const user = response.data.data?.user;
        
        if (!token) {
          throw new Error('No authentication token received from server');
        }
        
        if (!user || !user.email) {
          throw new Error('Invalid user data received from server');
        }
        
        // Normalize user data - handle server response format
        const serverUser = user as any; // Server response may have _id instead of id
        const normalizedUser: UserData = {
          id: serverUser._id || serverUser.id,
          email: serverUser.email,
          profile: serverUser.profile,
          createdAt: serverUser.createdAt || new Date().toISOString(),
          isPremium: serverUser.isPremium,
          settings: serverUser.settings,
        };
        
        // Ensure we have the correct id format
        if (!normalizedUser.id) {
          throw new Error('Invalid user ID received from server');
        }
        
        console.log('[AuthContext] Storing authentication data...');
        
        // CRITICAL FIX: Sequential storage operations with rollback
        try {
          // Store token first
          await SecureStorageService.setToken(token);
          console.log('[AuthContext] Token stored successfully');
          
          // Store user data
          await SecureStorageService.setUserData(normalizedUser);
          console.log('[AuthContext] User data stored successfully');
          
          // Clear other users' data (should be empty for new user)
          if (normalizedUser.id) {
            await SecureStorageService.clearOtherUsersData(normalizedUser.id);
            console.log('[AuthContext] Other users data cleared');
          }
          
          // Update state only after all storage operations succeed
          setIsAuthenticated(true);
          setUserData(normalizedUser);
          
          console.log('[AuthContext] Sign up successful');
          return { success: true };
          
        } catch (storageError) {
          // CRITICAL FIX: Rollback on storage failure
          console.error('[AuthContext] Storage operation failed, rolling back:', storageError);
          
          // Rollback state
          setIsAuthenticated(originalAuthState.isAuthenticated);
          setUserData(originalAuthState.userData);
          
          // Clear any partially stored data
          try {
            await SecureStorageService.clearSessionData();
          } catch (clearError) {
            console.error('[AuthContext] Failed to clear data during rollback:', clearError);
          }
          
          throw new Error('Failed to store authentication data. Please try again.');
        }
        
      } else {
        console.error('Signup failed:', response.error);
        return { 
          success: false, 
          error: response.error || 'Signup failed' 
        };
      }
    } catch (error: unknown) {
      console.error('Signup error:', error);
      
      // CRITICAL FIX: Ensure state is consistent on error
      setIsAuthenticated(originalAuthState.isAuthenticated);
      setUserData(originalAuthState.userData);
      
      const errorMessage = error instanceof Error ? error.message : 'Network error occurred';
      return { 
        success: false, 
        error: errorMessage
      };
    } finally {
      setLoading(false);
      authStateLock.current = false;
    }
  };

  // CRITICAL FIX: Enhanced logout with proper cleanup
  const logout = async (): Promise<void> => {
    if (authStateLock.current) {
      console.warn('[AuthContext] Auth operation already in progress, ignoring logout request');
      return;
    }

    authStateLock.current = true;
    setLoading(true);
    
    try {
      console.log('[AuthContext] Logging out user:', userData?.email);
      await clearAuthData();
      console.log('[AuthContext] Logout successful');
    } catch (error) {
      console.error('Logout error:', error);
      // Force clear data even if there's an error
      await clearAuthData();
    } finally {
      setLoading(false);
      authStateLock.current = false;
    }
  };

  // Check authentication status
  const checkAuthStatus = async (): Promise<void> => {
    if (!isAuthenticated) return;
    
    console.log('[AuthContext] checkAuthStatus called - validating token...');
    
    try {
      const validation = await ApiService.validateToken();
      console.log('[AuthContext] Token validation result:', validation);
      
      if (!validation.success) {
        console.log('[AuthContext] Token validation failed, logging out');
        await logout();
      } else {
        console.log('[AuthContext] Token validation successful');
      }
    } catch (error) {
      console.error('Auth status check error:', error);
    }
  };

  // Refresh user data from server
  const refreshUserData = async (): Promise<void> => {
    if (!isAuthenticated) return;
    
    try {
      const response = await ApiService.getUserProfile();
      
      if (response.success && response.data) {
        setUserData(response.data);
        await SecureStorageService.setUserData(response.data);
      }
    } catch (error) {
      console.error('Refresh user data error:', error);
    }
  };

  const value: AuthContextType = {
    // State
    isAuthenticated,
    loading,
    userData,
    isInitializing,
    
    // Methods
    login,
    signUp,
    logout,
    checkAuthStatus,
    refreshUserData,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;